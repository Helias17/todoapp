{"version":3,"sources":["components/InputNotice.tsx","components/TaskPriority.tsx","components/AddTask.tsx","components/TodoList.tsx","components/DeleteCompletedTasks.tsx","components/Stats.tsx","replaceSpecialChars.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["InputNotice","className","priority","name","selected","TaskPriority","onPriorityChange","useState","radioState","setRadioState","handleChange","arrIndex","updatedRadioState","forEach","radioItem","index","map","type","checked","id","toLowerCase","onChange","bind","htmlFor","AddTask","props","inputField","useRef","inputNoticeVisible","setInputNoticeVisible","input","setInput","placeholder","autoFocus","value","ref","e","target","length","onKeyUp","code","onAdd","current","focus","onClick","TodoList","todoList","onDelete","onToggle","itemClassName","sort","x","y","completed","todoItem","title","DeleteCompletedTasks","onDeleteAllCompleted","filter","Stats","fulfilledTasks","specialChars","char","replacement","replaceSpecialChars","str","item","regexp","RegExp","replace","App","setTodoList","useEffect","savedTaskList","JSON","parse","localStorage","getItem","setItem","stringify","window","confirm","prev","updatedTodoList","newTodoItem","Date","now","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b421e50d.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst InputNotice: React.FC = () => {\r\n\r\n  return (\r\n    <p className=\"inputNotice animate__animated animate__bounceInLeft animate__faster\">Please, enter the title of task</p>\r\n  );\r\n}\r\n\r\nexport default InputNotice;","import React, { useState } from 'react';\r\nimport { Priority, TaskPriorityType } from '../interfaces'\r\n\r\n\r\nexport const priority: Priority[] = [\r\n  { name: 'Low', selected: false },\r\n  { name: 'Medium', selected: true },\r\n  { name: 'High', selected: false },\r\n];\r\n\r\nconst TaskPriority: React.FC<TaskPriorityType> = ({ onPriorityChange }) => {\r\n\r\n  const [radioState, setRadioState] = useState(priority);\r\n\r\n  const handleChange = (arrIndex: number) => {\r\n\r\n    const updatedRadioState: Priority[] = [...radioState];\r\n\r\n    updatedRadioState.forEach((radioItem, index) => {\r\n      radioItem.selected = index === arrIndex ? true : false;\r\n    })\r\n\r\n    setRadioState(updatedRadioState);\r\n    onPriorityChange(arrIndex);\r\n  }\r\n\r\n  return (\r\n    <div className=\"taskPriority animate__animated animate__bounceInDown\">\r\n      <p className=\"taskPriority__title\">Task priority:</p>\r\n      {radioState.map((radioItem, index) => <div key={index}>\r\n        <input type=\"radio\" name=\"priority\" className=\"taskPriority__input\"\r\n          checked={radioItem.selected}\r\n          id={radioItem.name.toLowerCase()}\r\n          onChange={handleChange.bind(null, index)}\r\n        />\r\n        <label htmlFor={radioItem.name.toLowerCase()}\r\n          className=\"taskPriority__label\">\r\n          {radioItem.name}\r\n        </label>\r\n      </div>)}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TaskPriority;","import React, { useState, useRef } from 'react';\r\nimport InputNotice from './InputNotice';\r\nimport TaskPriority from './TaskPriority';\r\n\r\n\r\ninterface inputProps {\r\n  onAdd(input: string, priority: number): void;\r\n}\r\n\r\nlet priority: number = 1;\r\n\r\nconst AddTask: React.FunctionComponent<inputProps> = props => {\r\n\r\n  const inputField = useRef<HTMLInputElement>(null);\r\n\r\n  const [inputNoticeVisible, setInputNoticeVisible] = useState<boolean>(false);\r\n\r\n  const [input, setInput] = useState<string>('');\r\n\r\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    setInput(e.target.value);\r\n    if (e.target.value.length) setInputNoticeVisible(false);\r\n  }\r\n\r\n  const handleAddBtn = () => {\r\n    if (input.length) {\r\n      props.onAdd(input, priority);\r\n      setInput('');\r\n    } else {\r\n      setInputNoticeVisible(true);\r\n    }\r\n    if (inputField.current !== null) {\r\n      inputField.current.focus();\r\n    }\r\n  }\r\n\r\n  const handleKeyUp = (e: React.KeyboardEvent) => {\r\n    if (e.code === 'Enter') {\r\n      if (input.length) {\r\n        props.onAdd(input, priority);\r\n        setInput('');\r\n      } else {\r\n        setInputNoticeVisible(true);\r\n      }\r\n      if (inputField.current !== null) inputField.current.focus();\r\n    }\r\n  }\r\n\r\n  const handlePriorityChange = (id: number) => {\r\n    priority = id;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"inputBox\">\r\n        <div className=\"inputFieldBox\">\r\n          <input type=\"text\" placeholder=\"Type task title\" autoFocus={true}\r\n            value={input}\r\n            className=\"todoInput\"\r\n            ref={inputField}\r\n            onChange={handleChange}\r\n            onKeyUp={handleKeyUp}\r\n          />\r\n        </div>\r\n        <div>\r\n          <button className=\"todoInputBtn\" onClick={handleAddBtn}>Add task</button>\r\n        </div>\r\n      </div>\r\n      {inputNoticeVisible && <InputNotice />}\r\n      {!!input.length && <TaskPriority\r\n        onPriorityChange={handlePriorityChange}\r\n      />}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default AddTask;","import React from 'react';\r\nimport { ITodoItem } from '../interfaces';\r\nimport { priority } from './TaskPriority';\r\n\r\ntype TodoListProps = {\r\n  todoList: ITodoItem[];\r\n  onToggle(id: number): void;\r\n  onDelete: (id: number) => void; // alternative type syntax\r\n}\r\n\r\nconst TodoList: React.FC<TodoListProps> = ({ todoList, onDelete, onToggle }) => {\r\n\r\n  if (!todoList.length) return (\r\n    <ul className=\"todoList\">\r\n      <li className=\"todoListItem\">No tasks at the moment. You can add first task.</li>\r\n    </ul>\r\n  )\r\n\r\n  const itemClassName = 'todoItemLabel ';\r\n\r\n  todoList.sort((x, y) => {\r\n    return (y.completed === x.completed) ? 0 : y.completed ? -1 : 1;\r\n  })\r\n\r\n  return (\r\n    <ul className=\"todoList\">\r\n      {todoList.map(todoItem => (\r\n        <li className=\"todoListItem\" key={todoItem.id}>\r\n          <label className={todoItem.completed ? `${itemClassName} todoItemLabel_size${todoItem.priority} todoItemLabel_fulfilled` : `${itemClassName} todoItemLabel_size${todoItem.priority}`}\r\n            title={`Importance: ${priority[todoItem.priority].name}`}\r\n          >\r\n            <input type=\"checkbox\" checked={todoItem.completed} className=\"todoItemCheckbox\"\r\n              onChange={onToggle.bind(null, todoItem.id)} />\r\n            <span>{todoItem.title}</span>\r\n          </label>\r\n          <div className=\"todoItemDel\" onClick={() => onDelete(todoItem.id)}></div>\r\n        </li>\r\n      ))}\r\n\r\n    </ul>\r\n  );\r\n}\r\n\r\nexport default TodoList;","import React from 'react';\r\nimport { ITodoItem } from '../interfaces';\r\n\r\ntype DeleteCompletedTasksProps = {\r\n  todoList: ITodoItem[];\r\n  onDeleteAllCompleted(): void\r\n}\r\n\r\nconst DeleteCompletedTasks: React.FC<DeleteCompletedTasksProps> = ({ todoList, onDeleteAllCompleted }) => {\r\n\r\n  const fulfilledTasks = todoList.filter(todoItem => todoItem.completed === true);\r\n\r\n  if (fulfilledTasks.length < 2) return null;\r\n\r\n  return (\r\n    <div>\r\n      <button className=\"todoInputBtn animate__animated animate__bounceInRight animate__faster\" onClick={onDeleteAllCompleted}>\r\n        Delete completed tasks\r\n      </button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default DeleteCompletedTasks;","import React from 'react';\r\nimport { ITodoItem } from '../interfaces';\r\n\r\ntype StatsProps = {\r\n  todoList: ITodoItem[];\r\n}\r\n\r\nconst Stats: React.FC<StatsProps> = ({ todoList }) => {\r\n\r\n  const fulfilledTasks = todoList.filter(todoItem => todoItem.completed);\r\n\r\n  return (\r\n    <ul className=\"todoHeaderStats\">\r\n      {todoList.length ? <li>Total tasks: {todoList.length}</li> : ''}\r\n      {todoList.length ? <li>Fulfilled: {fulfilledTasks.length}</li> : ''}\r\n      {todoList.length ? <li>Waiting: {todoList.length - fulfilledTasks.length}</li> : ''}\r\n\r\n\r\n    </ul >\r\n  );\r\n}\r\n\r\nexport default Stats;","import { ISpecialChars } from './interfaces';\r\n\r\nconst specialChars: ISpecialChars[] = [\r\n  { char: '<', replacement: '\\u003C‎' },\r\n  { char: '>', replacement: '\\u003E‎' },\r\n  { char: '\"', replacement: '\\u201C' },\r\n  { char: '{', replacement: '\\u007B' },\r\n  { char: '}', replacement: '\\u007D' },\r\n  { char: '\\'', replacement: '\\u0027' },\r\n];\r\n\r\nconst replaceSpecialChars = (str: string): string => {\r\n\r\n  specialChars.forEach(item => {\r\n    const regexp = new RegExp(item.char, \"g\");\r\n    str = str.replace(regexp, item.replacement);\r\n  })\r\n  return str;\r\n}\r\n\r\nexport default replaceSpecialChars;","import React, { useState, useEffect } from 'react';\r\nimport AddTask from './components/AddTask';\r\nimport TodoList from './components/TodoList';\r\nimport DeleteCompletedTasks from './components/DeleteCompletedTasks';\r\nimport { ITodoItem } from './interfaces';\r\nimport Stats from './components/Stats';\r\nimport replaceSpecialChars from './replaceSpecialChars';\r\n\r\nconst App: React.FC = () => {\r\n\r\n  const [todoList, setTodoList] = useState<ITodoItem[]>([]);\r\n\r\n  useEffect(() => {\r\n    const savedTaskList: ITodoItem[] = JSON.parse(localStorage.getItem('todoAppTaskList') || '[]');\r\n    setTodoList(savedTaskList);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem('todoAppTaskList', JSON.stringify(todoList));\r\n  }, [todoList])\r\n\r\n  const handleAdd = (input: string, priority: number) => {\r\n\r\n    const newTodoItem: ITodoItem = {\r\n      title: replaceSpecialChars(input),\r\n      id: Date.now(),\r\n      completed: false,\r\n      priority\r\n    };\r\n    setTodoList(prev => [newTodoItem, ...prev]);\r\n  }\r\n\r\n  const handleToggleTaskItem = (id: number) => {\r\n    const updatedTodoList: ITodoItem[] = todoList.map(todoItem => {\r\n      if (todoItem.id === id) {\r\n        todoItem.completed = !todoItem.completed;\r\n      }\r\n      return todoItem;\r\n    });\r\n    setTodoList(updatedTodoList);\r\n  }\r\n\r\n  const handleDeleteTaskItem = (id: number) => {\r\n    const needToRemove = window.confirm('Are you sure to delete this task?');\r\n    if (needToRemove) setTodoList(prev => prev.filter(todoItem => todoItem.id !== id));\r\n  }\r\n\r\n  const handleDeleteCompletedTasks = () => {\r\n    const needToRemove = window.confirm('Are you sure to delete all completed tasks?');\r\n    if (needToRemove) setTodoList(prev => prev.filter(todoItem => !todoItem.completed));\r\n  }\r\n\r\n  return (\r\n    <div className=\"todoApp\">\r\n      <header className=\"pageHeader\">\r\n        <h1 className=\"todoTitle animate__animated animate__bounceInDown\">My task list</h1>\r\n        {!!todoList.length && (\r\n          <div className=\"todoHeader\">\r\n            <Stats todoList={todoList} />\r\n            <DeleteCompletedTasks\r\n              onDeleteAllCompleted={handleDeleteCompletedTasks}\r\n              todoList={todoList}\r\n            />\r\n          </div>\r\n        )}\r\n      </header>\r\n      <main className=\"todoBody\">\r\n        <TodoList\r\n          todoList={todoList}\r\n          onToggle={handleToggleTaskItem}\r\n          onDelete={handleDeleteTaskItem}\r\n        />\r\n        <AddTask onAdd={handleAdd} />\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './styles/reset.css';\r\nimport './styles/index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}